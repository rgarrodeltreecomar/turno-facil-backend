// <auto-generated />
using System;
using Api.ClinicaMedica.AccesoDatos;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Api.ClinicaMedica.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250311012739_modificacion-roles")]
    partial class modificacionroles
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Api.ClinicaMedica.Entities.CitasMedicas", b =>
                {
                    b.Property<string>("IdCitas")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("FechaConsulta")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("HoraConsulta")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdMedico")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdPaciente")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdServicio")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("MontoTotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PagadoONo")
                        .HasColumnType("int");

                    b.HasKey("IdCitas");

                    b.HasIndex("IdMedico");

                    b.HasIndex("IdPaciente");

                    b.HasIndex("IdServicio");

                    b.ToTable("CitasMedicas");
                });

            modelBuilder.Entity("Api.ClinicaMedica.Entities.Consultas", b =>
                {
                    b.Property<string>("IdConsulta")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("FechaConsulta")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("HoraConsulta")
                        .HasColumnType("time");

                    b.Property<string>("IdMedico")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdPaciente")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdPaquete")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdServicio")
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("MontoTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Pagado")
                        .HasColumnType("bit");

                    b.HasKey("IdConsulta");

                    b.HasIndex("IdMedico");

                    b.HasIndex("IdPaciente");

                    b.HasIndex("IdPaquete");

                    b.HasIndex("IdServicio");

                    b.ToTable("Consultas");
                });

            modelBuilder.Entity("Api.ClinicaMedica.Entities.DetalleServicios", b =>
                {
                    b.Property<string>("IdCitas")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdServicio")
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("MontoParcial")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdCitas", "IdServicio");

                    b.HasIndex("IdServicio");

                    b.ToTable("DetalleServicios");
                });

            modelBuilder.Entity("Api.ClinicaMedica.Entities.Especialidades", b =>
                {
                    b.Property<string>("IdEspecialidad")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Detalle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdEspecialidad");

                    b.ToTable("Especialidades");
                });

            modelBuilder.Entity("Api.ClinicaMedica.Entities.Facturacion", b =>
                {
                    b.Property<string>("IdFactura")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("FechaPago")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("IdConsulta")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MetodoPago")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MontoPagado")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("IdFactura");

                    b.HasIndex("IdConsulta");

                    b.ToTable("Facturaciones");
                });

            modelBuilder.Entity("Api.ClinicaMedica.Entities.Horarios", b =>
                {
                    b.Property<string>("IdHorario")
                        .HasColumnType("nvarchar(450)");

                    b.Property<TimeSpan>("HorarioFin")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("HorarioInicio")
                        .HasColumnType("time");

                    b.HasKey("IdHorario");

                    b.ToTable("Horarios");

                    b.HasData(
                        new
                        {
                            IdHorario = "H1",
                            HorarioFin = new TimeSpan(0, 8, 30, 0, 0),
                            HorarioInicio = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            IdHorario = "H2",
                            HorarioFin = new TimeSpan(0, 9, 0, 0, 0),
                            HorarioInicio = new TimeSpan(0, 8, 30, 0, 0)
                        },
                        new
                        {
                            IdHorario = "H3",
                            HorarioFin = new TimeSpan(0, 9, 30, 0, 0),
                            HorarioInicio = new TimeSpan(0, 9, 0, 0, 0)
                        },
                        new
                        {
                            IdHorario = "H4",
                            HorarioFin = new TimeSpan(0, 10, 0, 0, 0),
                            HorarioInicio = new TimeSpan(0, 9, 30, 0, 0)
                        },
                        new
                        {
                            IdHorario = "H5",
                            HorarioFin = new TimeSpan(0, 10, 30, 0, 0),
                            HorarioInicio = new TimeSpan(0, 10, 0, 0, 0)
                        },
                        new
                        {
                            IdHorario = "H6",
                            HorarioFin = new TimeSpan(0, 11, 0, 0, 0),
                            HorarioInicio = new TimeSpan(0, 10, 30, 0, 0)
                        },
                        new
                        {
                            IdHorario = "H7",
                            HorarioFin = new TimeSpan(0, 11, 30, 0, 0),
                            HorarioInicio = new TimeSpan(0, 11, 0, 0, 0)
                        },
                        new
                        {
                            IdHorario = "H8",
                            HorarioFin = new TimeSpan(0, 12, 0, 0, 0),
                            HorarioInicio = new TimeSpan(0, 11, 30, 0, 0)
                        },
                        new
                        {
                            IdHorario = "H9",
                            HorarioFin = new TimeSpan(0, 13, 30, 0, 0),
                            HorarioInicio = new TimeSpan(0, 13, 0, 0, 0)
                        },
                        new
                        {
                            IdHorario = "H10",
                            HorarioFin = new TimeSpan(0, 14, 0, 0, 0),
                            HorarioInicio = new TimeSpan(0, 13, 30, 0, 0)
                        },
                        new
                        {
                            IdHorario = "H11",
                            HorarioFin = new TimeSpan(0, 14, 30, 0, 0),
                            HorarioInicio = new TimeSpan(0, 14, 0, 0, 0)
                        },
                        new
                        {
                            IdHorario = "H12",
                            HorarioFin = new TimeSpan(0, 15, 0, 0, 0),
                            HorarioInicio = new TimeSpan(0, 14, 30, 0, 0)
                        },
                        new
                        {
                            IdHorario = "H13",
                            HorarioFin = new TimeSpan(0, 15, 30, 0, 0),
                            HorarioInicio = new TimeSpan(0, 15, 0, 0, 0)
                        },
                        new
                        {
                            IdHorario = "H14",
                            HorarioFin = new TimeSpan(0, 16, 0, 0, 0),
                            HorarioInicio = new TimeSpan(0, 15, 30, 0, 0)
                        },
                        new
                        {
                            IdHorario = "H15",
                            HorarioFin = new TimeSpan(0, 16, 30, 0, 0),
                            HorarioInicio = new TimeSpan(0, 16, 0, 0, 0)
                        },
                        new
                        {
                            IdHorario = "H16",
                            HorarioFin = new TimeSpan(0, 17, 0, 0, 0),
                            HorarioInicio = new TimeSpan(0, 16, 30, 0, 0)
                        });
                });

            modelBuilder.Entity("Api.ClinicaMedica.Entities.Medicos", b =>
                {
                    b.Property<string>("IdMedico")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdEspecialidad")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdUsuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Sueldo")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdMedico");

                    b.HasIndex("IdEspecialidad");

                    b.ToTable("Medicos", (string)null);
                });

            modelBuilder.Entity("Api.ClinicaMedica.Entities.Pacientes", b =>
                {
                    b.Property<string>("IdPaciente")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdUsuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("ObraSocial")
                        .HasColumnType("bit");

                    b.HasKey("IdPaciente");

                    b.HasIndex("IdUsuario")
                        .IsUnique();

                    b.ToTable("Pacientes", (string)null);
                });

            modelBuilder.Entity("Api.ClinicaMedica.Entities.PaqueteServicio", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CodigoPaquete")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CodigoServicio")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CodigoPaquete");

                    b.HasIndex("CodigoServicio");

                    b.ToTable("PaqueteServicios");
                });

            modelBuilder.Entity("Api.ClinicaMedica.Entities.Paquetes", b =>
                {
                    b.Property<string>("CodigoPaquete")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PrecioPaquete")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("CodigoPaquete");

                    b.ToTable("Paquetes");
                });

            modelBuilder.Entity("Api.ClinicaMedica.Entities.Roles", b =>
                {
                    b.Property<int>("IdRol")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdRol");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            IdRol = 1,
                            Nombre = "Administrador"
                        },
                        new
                        {
                            IdRol = 2,
                            Nombre = "Médico"
                        },
                        new
                        {
                            IdRol = 3,
                            Nombre = "Paciente"
                        });
                });

            modelBuilder.Entity("Api.ClinicaMedica.Entities.Servicios", b =>
                {
                    b.Property<string>("IdServicio")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdServicio");

                    b.ToTable("Servicios", (string)null);
                });

            modelBuilder.Entity("Api.ClinicaMedica.Entities.Turnos", b =>
                {
                    b.Property<string>("IdTurno")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Asistencia")
                        .HasColumnType("bit");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Disponible");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("date");

                    b.Property<string>("IdHorario")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdMedico")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdPaciente")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IdTurno");

                    b.HasIndex("IdMedico");

                    b.HasIndex("IdPaciente");

                    b.HasIndex("IdHorario", "IdMedico", "Fecha")
                        .IsUnique()
                        .HasDatabaseName("UQ_Turnos_Horario_Medico_Fecha");

                    b.ToTable("Turnos");
                });

            modelBuilder.Entity("Api.ClinicaMedica.Entities.Usuarios", b =>
                {
                    b.Property<string>("IdUsuario")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Dni")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdRol")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Telefono")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("IdUsuario");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("IdRol");

                    b.ToTable("Usuarios", (string)null);
                });

            modelBuilder.Entity("Api.ClinicaMedica.Entities.CitasMedicas", b =>
                {
                    b.HasOne("Api.ClinicaMedica.Entities.Medicos", "Medico")
                        .WithMany()
                        .HasForeignKey("IdMedico")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Api.ClinicaMedica.Entities.Pacientes", "Paciente")
                        .WithMany()
                        .HasForeignKey("IdPaciente")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Api.ClinicaMedica.Entities.Servicios", "Servicio")
                        .WithMany()
                        .HasForeignKey("IdServicio")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Medico");

                    b.Navigation("Paciente");

                    b.Navigation("Servicio");
                });

            modelBuilder.Entity("Api.ClinicaMedica.Entities.Consultas", b =>
                {
                    b.HasOne("Api.ClinicaMedica.Entities.Medicos", "Medico")
                        .WithMany()
                        .HasForeignKey("IdMedico")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Api.ClinicaMedica.Entities.Pacientes", "Paciente")
                        .WithMany()
                        .HasForeignKey("IdPaciente")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Api.ClinicaMedica.Entities.Paquetes", "Paquete")
                        .WithMany()
                        .HasForeignKey("IdPaquete")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Api.ClinicaMedica.Entities.Servicios", "Servicio")
                        .WithMany()
                        .HasForeignKey("IdServicio")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Medico");

                    b.Navigation("Paciente");

                    b.Navigation("Paquete");

                    b.Navigation("Servicio");
                });

            modelBuilder.Entity("Api.ClinicaMedica.Entities.DetalleServicios", b =>
                {
                    b.HasOne("Api.ClinicaMedica.Entities.CitasMedicas", "CitaMedica")
                        .WithMany("DetallesServicios")
                        .HasForeignKey("IdCitas")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.ClinicaMedica.Entities.Servicios", "Servicio")
                        .WithMany()
                        .HasForeignKey("IdServicio")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CitaMedica");

                    b.Navigation("Servicio");
                });

            modelBuilder.Entity("Api.ClinicaMedica.Entities.Facturacion", b =>
                {
                    b.HasOne("Api.ClinicaMedica.Entities.Consultas", "Consulta")
                        .WithMany()
                        .HasForeignKey("IdConsulta")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Consulta");
                });

            modelBuilder.Entity("Api.ClinicaMedica.Entities.Medicos", b =>
                {
                    b.HasOne("Api.ClinicaMedica.Entities.Especialidades", "Especialidad")
                        .WithMany("Medicos")
                        .HasForeignKey("IdEspecialidad")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Api.ClinicaMedica.Entities.Usuarios", "Usuario")
                        .WithOne("Medico")
                        .HasForeignKey("Api.ClinicaMedica.Entities.Medicos", "IdMedico")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Especialidad");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Api.ClinicaMedica.Entities.Pacientes", b =>
                {
                    b.HasOne("Api.ClinicaMedica.Entities.Usuarios", "Usuario")
                        .WithOne("Paciente")
                        .HasForeignKey("Api.ClinicaMedica.Entities.Pacientes", "IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Api.ClinicaMedica.Entities.PaqueteServicio", b =>
                {
                    b.HasOne("Api.ClinicaMedica.Entities.Paquetes", "Paquete")
                        .WithMany("PaqueteServicios")
                        .HasForeignKey("CodigoPaquete")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.ClinicaMedica.Entities.Servicios", "Servicio")
                        .WithMany()
                        .HasForeignKey("CodigoServicio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paquete");

                    b.Navigation("Servicio");
                });

            modelBuilder.Entity("Api.ClinicaMedica.Entities.Turnos", b =>
                {
                    b.HasOne("Api.ClinicaMedica.Entities.Horarios", "Horario")
                        .WithMany("Turnos")
                        .HasForeignKey("IdHorario")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Api.ClinicaMedica.Entities.Medicos", "Medico")
                        .WithMany("Turnos")
                        .HasForeignKey("IdMedico")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Api.ClinicaMedica.Entities.Pacientes", "Paciente")
                        .WithMany("Turnos")
                        .HasForeignKey("IdPaciente")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Horario");

                    b.Navigation("Medico");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Api.ClinicaMedica.Entities.Usuarios", b =>
                {
                    b.HasOne("Api.ClinicaMedica.Entities.Roles", "Rol")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdRol")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("Api.ClinicaMedica.Entities.CitasMedicas", b =>
                {
                    b.Navigation("DetallesServicios");
                });

            modelBuilder.Entity("Api.ClinicaMedica.Entities.Especialidades", b =>
                {
                    b.Navigation("Medicos");
                });

            modelBuilder.Entity("Api.ClinicaMedica.Entities.Horarios", b =>
                {
                    b.Navigation("Turnos");
                });

            modelBuilder.Entity("Api.ClinicaMedica.Entities.Medicos", b =>
                {
                    b.Navigation("Turnos");
                });

            modelBuilder.Entity("Api.ClinicaMedica.Entities.Pacientes", b =>
                {
                    b.Navigation("Turnos");
                });

            modelBuilder.Entity("Api.ClinicaMedica.Entities.Paquetes", b =>
                {
                    b.Navigation("PaqueteServicios");
                });

            modelBuilder.Entity("Api.ClinicaMedica.Entities.Roles", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Api.ClinicaMedica.Entities.Usuarios", b =>
                {
                    b.Navigation("Medico")
                        .IsRequired();

                    b.Navigation("Paciente")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
